AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for failure detection of a single EC2 instance and launching a Lambda function to assign a load balancer.

Resources:
  # CloudWatch Alarm for Instance Status Check
  InstanceStatusCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "InstanceStatusCheckFailed"
      AlarmDescription: "Alarm when EC2 instance has status check failures."
      Namespace: "AWS/EC2"
      MetricName: "StatusCheckFailed_System"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref MyInstance
      Statistic: "Sum"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !GetAtt LaunchNewInstancePermission.Arn # Generate new instance EC2 secondary
        - !Ref LambdaInvokePermission
        - !Ref NotificationTopic # Notify when the alarm triggers
      OKActions:
        - !Ref NotificationTopic # Notify when the alarm goes back to OK

  # SNS Topic for notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref EmailAddress # Insert email address for notifications
          Protocol: email

  # ------------------------------------------------------------------ Lambda Function Switch LoadBalancer ---------------------------------------------------------
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "LambdaBasicExecution"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "ELBManagement"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                Resource: "*"
        - PolicyName: AllowStartRecovery
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - drs:StartRecovery
                  - drs:DescribeRecovery
                  - drs:ListRecoveryInstances
                Resource: "*"

  # Lambda Function to manage instance failure
  FailureHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "HandleInstanceFailure"
      Handler: "failure_handler.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              ec2_client = boto3.client('ec2')
              elb_client = boto3.client('elasticloadbalancing')
              drs_client = boto3.client('drs')

              # Extract the failed instance ID from the CloudWatch event
              instance_id = event['detail']['instance-id']
              load_balancer_name = os.environ['LOAD_BALANCER_NAME']

              # Deregister the failed instance from the load balancer
              elb_client.deregister_instances_from_load_balancer(
                  LoadBalancerName=load_balancer_name,
                  Instances=[{'InstanceId': instance_id}]
              )

              try:
                  # Replace 'your-recovery-instance-id' with the actual Recovery Instance ID
                  res_recovery = drs_client.start_recovery(
                    isDrill=True|False,
                    sourceServers=[
                          {
                              'sourceServerID': os.environ['SOURCE_SERVER_ID']
                          },
                      ],
                    tags={
                        'ProccessRecoveryTest': 'testRecovery'
                    }
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Recovery started successfully: ' + response['taskId'])
                  }
              except Exception as e:
                  return {
                      'statusCode': 400,
                      'body': json.dumps('Error starting recovery: ' + str(e))
                  }
              
              instance_recovery_id = res_recovery.job.participatingServers[0].recoveryInstanceID

              # If a healthy instance was found, register it
              if instance_recovery_id:
                  elb_client.register_instances_with_load_balancer(
                      LoadBalancerName=load_balancer_name,
                      Instances=[{'InstanceId': instance_recovery_id}]
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps(f'Instance {instance_id} deregistered and {instance_recovery_id} registered.')
                  }
              else:
                  return {
                      'statusCode': 500,
                      'body': json.dumps('No healthy instance found to register.')
                  }

      Runtime: python3.8 # Use your preferred Python runtime
      Timeout: 300
      Environment:
        LOAD_BALANCER_NAME: !Ref LoadBalancerDenodo
        SOURCE_SERVER_ID: !Ref InstanceEDR
      
  # Lambda Invoke Permission Switch LoadBalancer
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FailureHandlerLambda
      Principal: events.amazonaws.com
      SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:InstanceStatusCheckFailed

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
  VPCId:
    Description: VPC ID where the resources will be created
    Type: AWS::EC2::VPC::Id
  EmailAddress:
    Description: eMail address to receive notifications (for SNS)
    Type: String
  LoadBalancerDenodo:
    Description: Name of Loadbalancer
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  InstanceEDR:
    Description: Intance EDR
    Type: AWS::EC2::Instance